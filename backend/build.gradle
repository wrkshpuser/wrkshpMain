plugins {
    id 'java'
    id 'org.sonarqube' version '2.8'
}

apply plugin: 'jacoco'

group 'com.cts.shop'
version '1.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
    }
}

sonarqube {
    properties {
        property 'sonar.host.url', 'http://'+System.getenv('backendIP')+':9000'
        property 'sonar.projectName', 'awswrkshp-aut-backend'
        property 'sonar.projectKey', 'awswrkshp-aut-backend'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml'
    }
}

test {
    useJUnitPlatform();
}